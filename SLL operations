/*      NAME:-Aniket Borawake
        ROLL NO:26
        BATCH:-AS2
*/


#include<iostream>
using namespace std;

class emp{
	public:
	int eid;
	string empname;
	long empsal;
	string empdes;
	long empmob;
	emp *next;
	
	void create();
	void display();
	void insertBeg();
	void insertEnd();
	void insertAtAnyPos();
	void removeStart();
	void removeEnd();
	void removeAtAnyPos();
	void search();
}*start;

void emp :: create(){
	int data;
	string name;
	long esal;
	string edes;
	long mobNo;
	emp *temp;
	temp = new emp;
	
	if(temp == NULL) {
		cout<<"Memory is not Allocated\n";
		return;
	}else {
		cout<<"Enter the emp id\n";
		cin>>data;
		cout<<"Enter the name\n";
		cin>>name;
		cout<<"Enter Emp Salary\n";
		cin>>esal;
		cout<<"Enter Emp designation\n";
		cin>>edes;
		cout<<"Enter Emp Mob no.\n";
		cin>>mobNo;
		
		temp->eid = data;
		temp->empname = name;
		temp->empsal = esal;
		temp->empdes = edes;
		temp->empmob = mobNo;
		temp->next = NULL;
	}
	start = temp;
}

void emp :: display() {
	emp *temp;
	
	temp = new emp;
	temp = start;
	if(temp == NULL) {
		cout<<"List is Empty\n";
		return;
	} else{
	        cout<< "Emp ID" <<"\t" << "Emp name" << "\t" << "Emp Sal" << "\t\t" << "Emp Designation" << "\t\t" << "Mobile No."<<"\n";
		while(temp!= NULL) {
			cout<<temp->eid<<"\t";
			cout<<temp->empname<<"\t\t";
			cout<<temp->empsal<<"\t\t";
			cout<<temp->empdes<<"\t\t";
			cout<<temp->empmob<<"\n";
			temp = temp->next;
		}
	}
	cout<<"\n";
}

void emp :: insertBeg() {
	emp *temp;
	temp = new emp;
	temp = start;
	long mobNo;
	int data;
	string name;
	long esal;
	string edes;
	emp *ptr;
	ptr = new emp;
	cout<<"Enter the emp id\n";
	cin>>data;
	cout<<"Enter the name\n";
	cin>>name;
	cout<<"Enter Emp Salary\n";
	cin>>esal;
	cout<<"Enter Emp designation\n";
	cin>>edes;
	cout<<"Enter Emp Mob no.\n";
	cin>>mobNo;
	ptr->eid = data;
	ptr->empname = name;
	ptr->empsal = esal;
	ptr->empdes = edes;
	ptr->empmob = mobNo;
	ptr->next = NULL;
	if(start == NULL) {
		start = ptr;
		return;
	} else{
		ptr->next = start;
	}
	start = ptr;
}

void emp :: insertEnd() {
	emp *temp;
	temp = new emp;
	temp = start;
	int data;
	long mobNo;
	string name;
	long esal;
	string edes;
	emp *ptr;
	ptr = new emp;
	cout<<"Enter the emp id\n";
	cin>>data;
	cout<<"Enter the name\n";
	cin>>name;
	cout<<"Enter Emp Salary\n";
	cin>>esal;
	cout<<"Enter Emp designation\n";
	cin>>edes;
	cout<<"Enter Emp Mob no.\n";
	cin>>mobNo;
	ptr->eid = data;
	ptr->empname = name;
	ptr->empsal = esal;
	ptr->empdes = edes;
	ptr->empmob = mobNo;
	ptr->next = NULL;
	if(start == NULL) {
		start = ptr;
		return;
	} else{
		while(temp->next != NULL) {
			temp = temp->next;
		}
	}
	temp->next = ptr;
}

void emp :: insertAtAnyPos() {
	int i = 0;
	int loc;
	int data;
	
	emp *temp;
	temp = new emp;
	temp = start;
	
	emp *ptr;
	ptr = new emp;
	
	string name;
	int esal;
	long mobNo;
	string edes;
	ptr = new emp;
	cout<<"Enter the emp id\n";
	cin>>data;
	cout<<"Enter the name\n";
	cin>>name;
	cout<<"Enter Emp Salary\n";
	cin>>esal;
	cout<<"Enter Emp designation\n";
	cin>>edes;
	cout<<"Enter Emp Mob no.\n";
	cin>>mobNo;
	ptr->eid = data;
	ptr->empname = name;
	ptr->empsal = esal;
	ptr->empdes = edes;
	ptr->empmob = mobNo;
	ptr->next = NULL;
	
	cout<<"Enter the location where you want to insert the data\n";
	cin>>loc;
	
	if(temp == NULL) {
		cout<<"List is EMPTY\n";
		return;
	} else {
		while(i<loc-1) {
			temp = temp->next;
			i++;
		}
	}
	emp *succ;
	succ = new emp;
	
	succ  = temp->next;
	temp->next = ptr;
	ptr->next = succ;
}

void emp :: removeStart() {
	emp *temp;
	temp = new emp;
	temp = start;
	if(start == NULL) {
		cout<<"List is EMPTY";
		return;
	} else{
		start = start->next;
		delete(temp);
	}
}

void emp :: removeEnd() {
	emp *del;
	del = new emp;
	
	emp *temp;
	temp = new emp;
	temp = start;
	
	if(start == NULL) {
		cout<<"List is EMPTY";
		return;
	} else if(start->next == NULL){
		del = start;
		delete(del);
		start = NULL;
	} else{
		while((temp->next)->next != NULL) {
			temp = temp->next;
		}
		del = temp->next;
		delete(del);
		temp->next = NULL;
	}
}

void emp :: removeAtAnyPos() {
	int i = 0;
	int loc;
	
	emp *curr;
	curr = new emp;
	
	emp*prev;
	prev = new emp;
	
	emp *temp;
	temp = new emp;
	temp = start;
	
	cout<<"Enter the location where you want to delete the data\n";
	cin>>loc;
	
	if(temp == NULL) {
		cout<<"List is EMPTY\n";
		return;
	} else {
		while(i<=loc) {
			if(i == loc) {
				curr = temp;
				break;
			}
			else if(i<loc){
				prev = temp;
				temp = temp->next;
			}
			i++;
		}
		prev->next = curr->next;
		delete(curr);
	}
	
}

void emp :: search() {
	int i = 0;
	int id;
  	cout<<"Enter emp id which you want to search\n";
   	cin>>id;
   	emp *temp;
   	temp = new emp;
   	temp = start;
   	
   	if(temp == NULL) {
		cout<<"List is EMPTY\n";
		return;
	} else {
		while(temp->eid != id) {
			if(temp -> next == NULL){
				cout<<"Element is not found";
				return;
			}
			temp = temp->next;
			i++;
		}
	}
   		
	if(temp->eid == id) {
	        cout<<"Ele is found at location : "<<i;
	}
}

int main(){
	emp emp1;
	int ch;
	
	do{
		cout<<"\nMenu";
		cout<<"\n1.Create the Linked List\n2.Display the Linked List\n3.Insert the Node at Beginning\n4.Insert the Node at the End\n5.Insert the node at Any position\n6.Delete the start node\n7.Delete the last Node\n8.Delete the Node From any position\n9.Searching an element";
		cout<<"\nEnter your Choice\n";
		cin>>ch;
		
		switch(ch) {
			case 1:
				emp1.create();
				break;
			case 2:
				emp1.display();
				break;
			case 3:
			    emp1.insertBeg();
				break;
			case 4:
			    emp1.insertEnd();
				break;
			case 5:
				emp1.insertAtAnyPos();
				break;
			case 6:
			    emp1.removeStart();
				break;
			case 7:
				emp1.removeEnd();
				break;
			case 8:
				emp1.removeAtAnyPos();
				break;
			case 9:
				emp1.search();
				break;
		}
	}while(ch != 0);
}
